This file has working notes and a "living" implementation plan
that can change as work goes on.

Main goal: describe 3D planes using Rust

Requirements:
- Data structure for planes
- Convert from global coordinates to 2D planar coordinates
- Data structurse for 2D, 3D vectors
- Transformation matrices for these vectors handling translation and rotation.
  -> Note that a general transform matrix for a 3D vector is a 4x4 w/
     homogenous coordinates.
- All matrices must be invertible
- Test whether a given point is inside plane bounds

Assumptions:
- Planes are all parallel
- Plane bounds are OK for now, but keep genericity in mind
- Assume f32 (c++ double) is OK -> taken from variant_data type

Plan:
- Use nalgebra crate for linear algebra ops, maybe hide this impl detail with
    wrapper classes.

- 3D planes -> use a struct with conversion operators
- Take bounds logic from ACTS impl

